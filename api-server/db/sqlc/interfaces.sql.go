// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: interfaces.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createInterface = `-- name: CreateInterface :one
INSERT INTO interfaces (
  macaddress,
  ipaddress,
  mtu,
  name
) VALUES (
  $1, $2,$3,$4
)
RETURNING id, name, macaddress, ipaddress, mtu, created_at
`

type CreateInterfaceParams struct {
	Macaddress string        `json:"macaddress"`
	Ipaddress  string        `json:"ipaddress"`
	Mtu        sql.NullInt64 `json:"mtu"`
	Name       string        `json:"name"`
}

func (q *Queries) CreateInterface(ctx context.Context, arg CreateInterfaceParams) (Interface, error) {
	row := q.db.QueryRowContext(ctx, createInterface,
		arg.Macaddress,
		arg.Ipaddress,
		arg.Mtu,
		arg.Name,
	)
	var i Interface
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Macaddress,
		&i.Ipaddress,
		&i.Mtu,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInterface = `-- name: DeleteInterface :exec
DELETE FROM interfaces
WHERE id = $1
`

func (q *Queries) DeleteInterface(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInterface, id)
	return err
}

const getInterface = `-- name: GetInterface :one
SELECT id, name, macaddress, ipaddress, mtu, created_at FROM interfaces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInterface(ctx context.Context, id int64) (Interface, error) {
	row := q.db.QueryRowContext(ctx, getInterface, id)
	var i Interface
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Macaddress,
		&i.Ipaddress,
		&i.Mtu,
		&i.CreatedAt,
	)
	return i, err
}

const listInterfaces = `-- name: ListInterfaces :many
SELECT id, name, macaddress, ipaddress, mtu, created_at FROM interfaces 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInterfacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInterfaces(ctx context.Context, arg ListInterfacesParams) ([]Interface, error) {
	rows, err := q.db.QueryContext(ctx, listInterfaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Interface{}
	for rows.Next() {
		var i Interface
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Macaddress,
			&i.Ipaddress,
			&i.Mtu,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInterface = `-- name: UpdateInterface :one
UPDATE interfaces 
SET name=$2
WHERE id=$1 
RETURNING id, name, macaddress, ipaddress, mtu, created_at
`

type UpdateInterfaceParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateInterface(ctx context.Context, arg UpdateInterfaceParams) (Interface, error) {
	row := q.db.QueryRowContext(ctx, updateInterface, arg.ID, arg.Name)
	var i Interface
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Macaddress,
		&i.Ipaddress,
		&i.Mtu,
		&i.CreatedAt,
	)
	return i, err
}
