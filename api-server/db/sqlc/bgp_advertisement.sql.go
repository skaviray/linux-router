// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bgp_advertisement.sql

package sqlc

import (
	"context"
)

const createBgpAdvertisement = `-- name: CreateBgpAdvertisement :one
INSERT INTO bgp_advertisement (
  name,
  destination_cidr
) VALUES (
  $1,$2
)
RETURNING id, name, destination_cidr, created_at
`

type CreateBgpAdvertisementParams struct {
	Name            string `json:"name"`
	DestinationCidr string `json:"destination_cidr"`
}

func (q *Queries) CreateBgpAdvertisement(ctx context.Context, arg CreateBgpAdvertisementParams) (BgpAdvertisement, error) {
	row := q.db.QueryRowContext(ctx, createBgpAdvertisement, arg.Name, arg.DestinationCidr)
	var i BgpAdvertisement
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DestinationCidr,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBgpAdvertisement = `-- name: DeleteBgpAdvertisement :exec
DELETE FROM bgp_advertisement
WHERE id = $1
`

func (q *Queries) DeleteBgpAdvertisement(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBgpAdvertisement, id)
	return err
}

const getBgpAdvertisement = `-- name: GetBgpAdvertisement :one
SELECT id, name, destination_cidr, created_at FROM bgp_advertisement
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBgpAdvertisement(ctx context.Context, id int64) (BgpAdvertisement, error) {
	row := q.db.QueryRowContext(ctx, getBgpAdvertisement, id)
	var i BgpAdvertisement
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DestinationCidr,
		&i.CreatedAt,
	)
	return i, err
}

const listBgpAdvertisements = `-- name: ListBgpAdvertisements :many
SELECT id, name, destination_cidr, created_at FROM bgp_advertisement 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBgpAdvertisementsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBgpAdvertisements(ctx context.Context, arg ListBgpAdvertisementsParams) ([]BgpAdvertisement, error) {
	rows, err := q.db.QueryContext(ctx, listBgpAdvertisements, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BgpAdvertisement{}
	for rows.Next() {
		var i BgpAdvertisement
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DestinationCidr,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBgpAdvertisement = `-- name: UpdateBgpAdvertisement :one
UPDATE bgp_advertisement 
SET name=$2
WHERE id=$1 
RETURNING id, name, destination_cidr, created_at
`

type UpdateBgpAdvertisementParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBgpAdvertisement(ctx context.Context, arg UpdateBgpAdvertisementParams) (BgpAdvertisement, error) {
	row := q.db.QueryRowContext(ctx, updateBgpAdvertisement, arg.ID, arg.Name)
	var i BgpAdvertisement
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DestinationCidr,
		&i.CreatedAt,
	)
	return i, err
}
