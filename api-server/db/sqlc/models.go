// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type InterfaceTypes string

const (
	InterfaceTypesVlan     InterfaceTypes = "vlan"
	InterfaceTypesVxlan    InterfaceTypes = "vxlan"
	InterfaceTypesBond     InterfaceTypes = "bond"
	InterfaceTypesEther    InterfaceTypes = "ether"
	InterfaceTypesUnknown  InterfaceTypes = "unknown"
	InterfaceTypesLoopback InterfaceTypes = "loopback"
)

func (e *InterfaceTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InterfaceTypes(s)
	case string:
		*e = InterfaceTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for InterfaceTypes: %T", src)
	}
	return nil
}

type NullInterfaceTypes struct {
	InterfaceTypes InterfaceTypes `json:"interface_types"`
	Valid          bool           `json:"valid"` // Valid is true if InterfaceTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInterfaceTypes) Scan(value interface{}) error {
	if value == nil {
		ns.InterfaceTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InterfaceTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInterfaceTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InterfaceTypes), nil
}

type BgpAdvertisement struct {
	ID              int64     `json:"id"`
	Name            string    `json:"name"`
	DestinationCidr string    `json:"destination_cidr"`
	CreatedAt       time.Time `json:"created_at"`
}

type BgpPeer struct {
	ID              int64     `json:"id"`
	Name            string    `json:"name"`
	AsNo            int64     `json:"as_no"`
	NeighborAddress string    `json:"neighbor_address"`
	LocalAs         int64     `json:"local_as"`
	CreatedAt       time.Time `json:"created_at"`
}

type Interface struct {
	ID         int64         `json:"id"`
	Name       string        `json:"name"`
	Macaddress string        `json:"macaddress"`
	Ipaddress  string        `json:"ipaddress"`
	Mtu        sql.NullInt64 `json:"mtu"`
	CreatedAt  time.Time     `json:"created_at"`
}

type System struct {
	ID          int64  `json:"id"`
	Component   string `json:"component"`
	Initialised bool   `json:"initialised"`
}

type Vlan struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Ipaddress string    `json:"ipaddress"`
	Netmask   string    `json:"netmask"`
	Lower     int64     `json:"lower"`
	Tag       int64     `json:"tag"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

type VxlanTunnel struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Tag       int64     `json:"tag"`
	TunnelIp  string    `json:"tunnel_ip"`
	LocalIp   string    `json:"local_ip"`
	RemoteIp  string    `json:"remote_ip"`
	RemoteMac string    `json:"remote_mac"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}
