// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bgp_peer.sql

package db

import (
	"context"
)

const createBgpPeer = `-- name: CreateBgpPeer :one
INSERT INTO bgp_peer (
  as_no,
  neighbor_address,
  local_as
) VALUES (
  $1, $2,$3
)
RETURNING id, name, as_no, neighbor_address, local_as, created_at
`

type CreateBgpPeerParams struct {
	AsNo            int32 `json:"as_no"`
	NeighborAddress int32 `json:"neighbor_address"`
	LocalAs         int32 `json:"local_as"`
}

func (q *Queries) CreateBgpPeer(ctx context.Context, arg CreateBgpPeerParams) (BgpPeer, error) {
	row := q.db.QueryRowContext(ctx, createBgpPeer, arg.AsNo, arg.NeighborAddress, arg.LocalAs)
	var i BgpPeer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AsNo,
		&i.NeighborAddress,
		&i.LocalAs,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBgpPeer = `-- name: DeleteBgpPeer :exec
DELETE FROM bgp_peer
WHERE id = $1
`

func (q *Queries) DeleteBgpPeer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBgpPeer, id)
	return err
}

const getBgpPeer = `-- name: GetBgpPeer :one
SELECT id, name, as_no, neighbor_address, local_as, created_at FROM bgp_peer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBgpPeer(ctx context.Context, id int64) (BgpPeer, error) {
	row := q.db.QueryRowContext(ctx, getBgpPeer, id)
	var i BgpPeer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AsNo,
		&i.NeighborAddress,
		&i.LocalAs,
		&i.CreatedAt,
	)
	return i, err
}

const listBgpPeers = `-- name: ListBgpPeers :many
SELECT id, name, as_no, neighbor_address, local_as, created_at FROM bgp_peer 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBgpPeersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBgpPeers(ctx context.Context, arg ListBgpPeersParams) ([]BgpPeer, error) {
	rows, err := q.db.QueryContext(ctx, listBgpPeers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BgpPeer
	for rows.Next() {
		var i BgpPeer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AsNo,
			&i.NeighborAddress,
			&i.LocalAs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBgpPeer = `-- name: UpdateBgpPeer :one
UPDATE bgp_peer 
SET name=$2
WHERE id=$1 
RETURNING id, name, as_no, neighbor_address, local_as, created_at
`

type UpdateBgpPeerParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBgpPeer(ctx context.Context, arg UpdateBgpPeerParams) (BgpPeer, error) {
	row := q.db.QueryRowContext(ctx, updateBgpPeer, arg.ID, arg.Name)
	var i BgpPeer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AsNo,
		&i.NeighborAddress,
		&i.LocalAs,
		&i.CreatedAt,
	)
	return i, err
}
