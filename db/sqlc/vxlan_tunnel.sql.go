// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vxlan_tunnel.sql

package db

import (
	"context"
	"database/sql"
)

const createVxlanTunnel = `-- name: CreateVxlanTunnel :one
INSERT INTO vxlan_tunnel (
  name,
  tag,
  tunnel_ip,
  local_ip,
  remote_ip,
  remote_mac
) VALUES (
  $1, $2,$3,$4,$5,$6
)
RETURNING id, name, tag, tunnel_ip, local_ip, remote_ip, remote_mac, phys_iface, created_at
`

type CreateVxlanTunnelParams struct {
	Name      sql.NullString `json:"name"`
	Tag       int64          `json:"tag"`
	TunnelIp  string         `json:"tunnel_ip"`
	LocalIp   string         `json:"local_ip"`
	RemoteIp  string         `json:"remote_ip"`
	RemoteMac string         `json:"remote_mac"`
}

func (q *Queries) CreateVxlanTunnel(ctx context.Context, arg CreateVxlanTunnelParams) (VxlanTunnel, error) {
	row := q.db.QueryRowContext(ctx, createVxlanTunnel,
		arg.Name,
		arg.Tag,
		arg.TunnelIp,
		arg.LocalIp,
		arg.RemoteIp,
		arg.RemoteMac,
	)
	var i VxlanTunnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.TunnelIp,
		&i.LocalIp,
		&i.RemoteIp,
		&i.RemoteMac,
		&i.PhysIface,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVxlanTunnel = `-- name: DeleteVxlanTunnel :exec
DELETE FROM vxlan_tunnel
WHERE id = $1
`

func (q *Queries) DeleteVxlanTunnel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVxlanTunnel, id)
	return err
}

const getVxlanTunnel = `-- name: GetVxlanTunnel :one
SELECT id, name, tag, tunnel_ip, local_ip, remote_ip, remote_mac, phys_iface, created_at FROM vxlan_tunnel
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVxlanTunnel(ctx context.Context, id int64) (VxlanTunnel, error) {
	row := q.db.QueryRowContext(ctx, getVxlanTunnel, id)
	var i VxlanTunnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.TunnelIp,
		&i.LocalIp,
		&i.RemoteIp,
		&i.RemoteMac,
		&i.PhysIface,
		&i.CreatedAt,
	)
	return i, err
}

const listVxlanTunnel = `-- name: ListVxlanTunnel :many
SELECT id, name, tag, tunnel_ip, local_ip, remote_ip, remote_mac, phys_iface, created_at FROM vxlan_tunnel 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListVxlanTunnelParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVxlanTunnel(ctx context.Context, arg ListVxlanTunnelParams) ([]VxlanTunnel, error) {
	rows, err := q.db.QueryContext(ctx, listVxlanTunnel, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VxlanTunnel
	for rows.Next() {
		var i VxlanTunnel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tag,
			&i.TunnelIp,
			&i.LocalIp,
			&i.RemoteIp,
			&i.RemoteMac,
			&i.PhysIface,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVxlanTunnel = `-- name: UpdateVxlanTunnel :one
UPDATE vxlan_tunnel 
SET name=$2
WHERE id=$1 
RETURNING id, name, tag, tunnel_ip, local_ip, remote_ip, remote_mac, phys_iface, created_at
`

type UpdateVxlanTunnelParams struct {
	ID   int64          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateVxlanTunnel(ctx context.Context, arg UpdateVxlanTunnelParams) (VxlanTunnel, error) {
	row := q.db.QueryRowContext(ctx, updateVxlanTunnel, arg.ID, arg.Name)
	var i VxlanTunnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.TunnelIp,
		&i.LocalIp,
		&i.RemoteIp,
		&i.RemoteMac,
		&i.PhysIface,
		&i.CreatedAt,
	)
	return i, err
}
